import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';

class PDFGenerator {
  static Future<String> generateContentPDF({
    required String title,
    required String content,
    Map<String, dynamic>? additionalData,
  }) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        build: (pw.Context context) {
          return [
            // Header
            pw.Container(
              alignment: pw.Alignment.center,
              child: pw.Text(
                title,
                style: pw.TextStyle(
                  fontSize: 24,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.blue800,
                ),
              ),
            ),
            pw.SizedBox(height: 20),
            pw.Divider(),
            pw.SizedBox(height: 20),

            // Main content
            pw.Container(
              child: pw.Text(
                content,
                style: const pw.TextStyle(
                  fontSize: 14,
                  lineSpacing: 1.5,
                ),
                textAlign: pw.TextAlign.justify,
              ),
            ),

            // Additional data sections
            if (additionalData != null)
              ..._buildAdditionalSections(additionalData),

            pw.SizedBox(height: 30),
            pw.Divider(),
            pw.SizedBox(height: 10),

            // Footer
            pw.Container(
              alignment: pw.Alignment.center,
              child: pw.Text(
                'Generated by AI Teaching Assistant on ${DateTime.now().toString().split(' ')[0]}',
                style: pw.TextStyle(
                  fontSize: 10,
                  color: PdfColors.grey600,
                  fontStyle: pw.FontStyle.italic,
                ),
              ),
            ),
          ];
        },
      ),
    );

    // Save to file
    final directory = await getApplicationDocumentsDirectory();
    final fileName =
        '${title.replaceAll(' ', '_')}_${DateTime.now().millisecondsSinceEpoch}.pdf';
    final file = File('${directory.path}/$fileName');

    await file.writeAsBytes(await pdf.save());
    return file.path;
  }

  static List<pw.Widget> _buildAdditionalSections(Map<String, dynamic> data) {
    final widgets = <pw.Widget>[];

    // Key Points section
    if (data.containsKey('keyPoints') && data['keyPoints'] is List) {
      widgets.addAll([
        pw.SizedBox(height: 20),
        pw.Text(
          'Key Points',
          style: pw.TextStyle(
            fontSize: 18,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.blue700,
          ),
        ),
        pw.SizedBox(height: 10),
        ...List<String>.from(data['keyPoints']).map(
          (point) => pw.Container(
            margin: const pw.EdgeInsets.only(bottom: 5),
            child: pw.Row(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('• ',
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.Expanded(child: pw.Text(point)),
              ],
            ),
          ),
        ),
      ]);
    }

    // Activities section
    if (data.containsKey('activities') && data['activities'] is List) {
      widgets.addAll([
        pw.SizedBox(height: 20),
        pw.Text(
          'Activities',
          style: pw.TextStyle(
            fontSize: 18,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.green700,
          ),
        ),
        pw.SizedBox(height: 10),
        ...List<String>.from(data['activities']).map(
          (activity) => pw.Container(
            margin: const pw.EdgeInsets.only(bottom: 5),
            child: pw.Row(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('• ',
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.Expanded(child: pw.Text(activity)),
              ],
            ),
          ),
        ),
      ]);
    }

    // Materials section
    if (data.containsKey('materials') && data['materials'] is List) {
      widgets.addAll([
        pw.SizedBox(height: 20),
        pw.Text(
          'Materials Needed',
          style: pw.TextStyle(
            fontSize: 18,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.orange700,
          ),
        ),
        pw.SizedBox(height: 10),
        pw.Wrap(
          spacing: 10,
          runSpacing: 5,
          children: List<String>.from(data['materials'])
              .map(
                (material) => pw.Container(
                  padding:
                      const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(color: PdfColors.grey400),
                    borderRadius: pw.BorderRadius.circular(4),
                  ),
                  child: pw.Text(
                    material,
                    style: const pw.TextStyle(fontSize: 12),
                  ),
                ),
              )
              .toList(),
        ),
      ]);
    }

    // Suggestions section
    if (data.containsKey('suggestions') && data['suggestions'] is List) {
      widgets.addAll([
        pw.SizedBox(height: 20),
        pw.Text(
          'Suggestions',
          style: pw.TextStyle(
            fontSize: 18,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.purple700,
          ),
        ),
        pw.SizedBox(height: 10),
        ...List<String>.from(data['suggestions']).map(
          (suggestion) => pw.Container(
            margin: const pw.EdgeInsets.only(bottom: 5),
            child: pw.Row(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text('• ',
                    style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                pw.Expanded(child: pw.Text(suggestion)),
              ],
            ),
          ),
        ),
      ]);
    }

    return widgets;
  }

  static Future<String> generateReadingAssessmentPDF({
    required String expectedText,
    required String actualText,
    required double accuracy,
    required int fluencyRating,
    required List<String> errors,
    required String feedback,
    required List<String> suggestions,
  }) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        build: (pw.Context context) {
          return [
            // Header
            pw.Container(
              alignment: pw.Alignment.center,
              child: pw.Text(
                'Reading Assessment Report',
                style: pw.TextStyle(
                  fontSize: 24,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.blue800,
                ),
              ),
            ),
            pw.SizedBox(height: 20),
            pw.Divider(),
            pw.SizedBox(height: 20),

            // Scores section
            pw.Container(
              padding: const pw.EdgeInsets.all(16),
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.grey400),
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceEvenly,
                children: [
                  pw.Column(
                    children: [
                      pw.Text(
                        '${accuracy.toStringAsFixed(1)}%',
                        style: pw.TextStyle(
                          fontSize: 32,
                          fontWeight: pw.FontWeight.bold,
                          color: accuracy >= 80
                              ? PdfColors.green
                              : accuracy >= 60
                                  ? PdfColors.orange
                                  : PdfColors.red,
                        ),
                      ),
                      pw.Text('Accuracy',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                    ],
                  ),
                  pw.Column(
                    children: [
                      pw.Text(
                        '$fluencyRating/5',
                        style: pw.TextStyle(
                          fontSize: 32,
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.blue,
                        ),
                      ),
                      pw.Text('Fluency',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                    ],
                  ),
                ],
              ),
            ),

            pw.SizedBox(height: 20),

            // Expected vs Actual text
            pw.Text(
              'Text Comparison',
              style: pw.TextStyle(
                fontSize: 18,
                fontWeight: pw.FontWeight.bold,
              ),
            ),
            pw.SizedBox(height: 10),

            pw.Container(
              margin: const pw.EdgeInsets.only(bottom: 10),
              padding: const pw.EdgeInsets.all(12),
              decoration: pw.BoxDecoration(
                color: PdfColors.green50,
                border: pw.Border.all(color: PdfColors.green200),
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Expected Text:',
                    style: pw.TextStyle(
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.green800,
                    ),
                  ),
                  pw.SizedBox(height: 5),
                  pw.Text(expectedText),
                ],
              ),
            ),

            pw.Container(
              margin: const pw.EdgeInsets.only(bottom: 20),
              padding: const pw.EdgeInsets.all(12),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                border: pw.Border.all(color: PdfColors.blue200),
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Actual Reading:',
                    style: pw.TextStyle(
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.blue800,
                    ),
                  ),
                  pw.SizedBox(height: 5),
                  pw.Text(actualText),
                ],
              ),
            ),

            // Errors section
            if (errors.isNotEmpty) ...[
              pw.Text(
                'Pronunciation Issues',
                style: pw.TextStyle(
                  fontSize: 18,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.orange700,
                ),
              ),
              pw.SizedBox(height: 10),
              ...errors.map(
                (error) => pw.Container(
                  margin: const pw.EdgeInsets.only(bottom: 5),
                  child: pw.Row(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text('• ',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                      pw.Expanded(child: pw.Text(error)),
                    ],
                  ),
                ),
              ),
              pw.SizedBox(height: 20),
            ],

            // Feedback section
            pw.Text(
              'Feedback',
              style: pw.TextStyle(
                fontSize: 18,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.blue700,
              ),
            ),
            pw.SizedBox(height: 10),
            pw.Container(
              padding: const pw.EdgeInsets.all(12),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Text(feedback),
            ),

            pw.SizedBox(height: 20),

            // Suggestions section
            if (suggestions.isNotEmpty) ...[
              pw.Text(
                'Improvement Suggestions',
                style: pw.TextStyle(
                  fontSize: 18,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.green700,
                ),
              ),
              pw.SizedBox(height: 10),
              ...suggestions.map(
                (suggestion) => pw.Container(
                  margin: const pw.EdgeInsets.only(bottom: 5),
                  child: pw.Row(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text('• ',
                          style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
                      pw.Expanded(child: pw.Text(suggestion)),
                    ],
                  ),
                ),
              ),
            ],

            pw.SizedBox(height: 30),
            pw.Divider(),
            pw.SizedBox(height: 10),

            // Footer
            pw.Container(
              alignment: pw.Alignment.center,
              child: pw.Text(
                'Assessment completed on ${DateTime.now().toString().split(' ')[0]}',
                style: pw.TextStyle(
                  fontSize: 10,
                  color: PdfColors.grey600,
                  fontStyle: pw.FontStyle.italic,
                ),
              ),
            ),
          ];
        },
      ),
    );

    // Save to file
    final directory = await getApplicationDocumentsDirectory();
    final fileName =
        'reading_assessment_${DateTime.now().millisecondsSinceEpoch}.pdf';
    final file = File('${directory.path}/$fileName');

    await file.writeAsBytes(await pdf.save());
    return file.path;
  }
}
